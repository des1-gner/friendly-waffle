Can you make me some iam json policy examples for s3? I want to understand very quickly where to put principal, arn, etc just put it like this: <test>

Certainly, I can provide you with some IAM JSON policy examples for S3. I'll present them in the format you requested, using the <test> tags. Here are a few examples to help you understand where to put the principal, ARN, and other elements:
<test> { "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::123456789012:user/username" }, "Action": "s3:GetObject", "Resource": "arn:aws:s3:::bucket-name/*" } ] } </test>

This example shows a policy that allows a specific IAM user to read objects from an S3 bucket. The principal is specified under the "Principal" key, and the ARN of the S3 bucket is under "Resource".

Here's another example with a different structure:
<test> { "Version": "2012-10-17", "Statement": [ { "Effect": "Deny", "Principal": "*", "Action": "s3:*", "Resource": [ "arn:aws:s3:::bucket-name", "arn:aws:s3:::bucket-name/*" ], "Condition": { "Bool": { "aws:SecureTransport": "false" } } } ] } </test>

This policy denies all S3 actions on a bucket and its contents when the request is not made through HTTPS. Note that the Principal is "*" (meaning all users), and there are multiple ARNs listed under "Resource".

Would you like me to provide more examples or explain any part of these policies in detail?
O

can you give a conditional and heaps of different combinations of optional stuff?

Certainly! I'll create a more complex IAM policy example for S3 that includes conditional statements and various optional elements. This will showcase different combinations and possibilities within an IAM policy.
<test> { "Version": "2012-10-17", "Id": "ComplexS3Policy", "Statement": [ { "Sid": "AllowListingForSpecificIP", "Effect": "Allow", "Principal": "*", "Action": [ "s3:ListBucket", "s3:GetBucketLocation" ], "Resource": "arn:aws:s3:::example-bucket", "Condition": { "IpAddress": { "aws:SourceIp": "203.0.113.0/24" } } }, { "Sid": "AllowObjectOperationsWithMFA", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::123456789012:role/SpecificRole" }, "Action": [ "s3:PutObject", "s3:GetObject", "s3:DeleteObject" ], "Resource": "arn:aws:s3:::example-bucket/*", "Condition": { "Bool": { "aws:MultiFactorAuthPresent": "true" }, "StringEquals": { "s3:x-amz-server-side-encryption": "AES256" } } }, { "Sid": "DenyDeleteIfNotTagged", "Effect": "Deny", "NotPrincipal": { "AWS": "arn:aws:iam::123456789012:user/AdminUser" }, "Action": "s3:DeleteObject", "Resource": "arn:aws:s3:::example-bucket/*", "Condition": { "Null": { "s3:ExpirationDate": "true" } } }, { "Sid": "AllowCrossAccountAccess", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::987654321098:root" }, "Action": [ "s3:GetBucketPolicy", "s3:PutBucketPolicy" ], "Resource": "arn:aws:s3:::example-bucket", "Condition": { "StringLike": { "aws:PrincipalArn": [ "arn:aws:iam::987654321098:role/AllowedRole*" ] }, "DateGreaterThan": { "aws:CurrentTime": "2023-01-01T00:00:00Z" }, "DateLessThan": { "aws:CurrentTime": "2025-01-01T00:00:00Z" } } } ] } </test>

This complex policy example includes:

    Multiple statements with different purposes
    Various principal types (*, specific IAM role, specific IAM user, cross-account access)
    Different effect types (Allow and Deny)
    NotPrincipal to exclude a specific user
    Multiple actions and resources
    Various condition operators:
        IpAddress condition
        Bool condition for MFA
        StringEquals for server-side encryption
        Null condition to check for the absence of a tag
        StringLike with wildcard for role matching
        DateGreaterThan and DateLessThan for time-based conditions
    Use of policy variables (aws:SourceIp, aws:MultiFactorAuthPresent, etc.)
    Cross-account access permissions
    Sid (Statement ID) for each statement
    An overall policy Id

This example demonstrates many of the optional elements and combinations possible in an IAM policy for S3. It shows how you can create fine-grained access controls based on various conditions such as IP address, MFA status, encryption settings, tags, time, and more.
